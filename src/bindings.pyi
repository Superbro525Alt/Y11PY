from typing import ClassVar

A: SDL_Scancode
ADD: BlendMode
Apostrophe: SDL_Scancode
B: SDL_Scancode
BLEND: BlendMode
Backslash: SDL_Scancode
Backspace: SDL_Scancode
C: SDL_Scancode
CapsLock: SDL_Scancode
Comma: SDL_Scancode
D: SDL_Scancode
Down: SDL_Scancode
E: SDL_Scancode
Eight: SDL_Scancode
Equals: SDL_Scancode
Escape: SDL_Scancode
F: SDL_Scancode
F1: SDL_Scancode
F10: SDL_Scancode
F11: SDL_Scancode
F12: SDL_Scancode
F2: SDL_Scancode
F3: SDL_Scancode
F4: SDL_Scancode
F5: SDL_Scancode
F6: SDL_Scancode
F7: SDL_Scancode
F8: SDL_Scancode
F9: SDL_Scancode
Five: SDL_Scancode
Four: SDL_Scancode
G: SDL_Scancode
Grave: SDL_Scancode
H: SDL_Scancode
I: SDL_Scancode
J: SDL_Scancode
K: SDL_Scancode
KEYDOWN: SDL_EventType
L: SDL_Scancode
Left: SDL_Scancode
LeftBracket: SDL_Scancode
M: SDL_Scancode
MOD: BlendMode
Minus: SDL_Scancode
N: SDL_Scancode
NONE: BlendMode
Nine: SDL_Scancode
O: SDL_Scancode
One: SDL_Scancode
P: SDL_Scancode
Period: SDL_Scancode
Q: SDL_Scancode
QUIT: SDL_EventType
R: SDL_Scancode
Return: SDL_Scancode
Right: SDL_Scancode
RightBracket: SDL_Scancode
S: SDL_Scancode
Semicolon: SDL_Scancode
Seven: SDL_Scancode
Six: SDL_Scancode
Slash: SDL_Scancode
Space: SDL_Scancode
T: SDL_Scancode
Tab: SDL_Scancode
Three: SDL_Scancode
Two: SDL_Scancode
U: SDL_Scancode
Unknown: SDL_Scancode
Up: SDL_Scancode
V: SDL_Scancode
W: SDL_Scancode
X: SDL_Scancode
Y: SDL_Scancode
Z: SDL_Scancode
Zero: SDL_Scancode

class BlendMode:
    __members__: ClassVar[dict] = ...  # read-only
    ADD: ClassVar[BlendMode] = ...
    BLEND: ClassVar[BlendMode] = ...
    MOD: ClassVar[BlendMode] = ...
    NONE: ClassVar[BlendMode] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Color:
    a: int
    b: int
    g: int
    r: int
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

class Rect:
    h: int
    w: int
    x: int
    y: int
    def __init__(self, arg0: int, arg1: int, arg2: int, arg3: int) -> None: ...

class SDLWrapper:
    def __init__(self, arg0: int, arg1: int, arg2: str) -> None: ...
    def clear_screen(self, arg0: int, arg1: int, arg2: int) -> None: ...
    def create_renderer(self) -> None: ...
    def create_window(self) -> None: ...
    def delay(self, arg0: int) -> None: ...
    def draw_circle(self, centerX: int, centerY: int, radius: int, r: int, g: int, b: int) -> None: ...
    def draw_line(self, x1: int, y1: int, x2: int, y2: int, r: int, g: int, b: int) -> None: ...
    def draw_point(self, x: int, y: int, r: int, g: int, b: int) -> None: ...
    def draw_polygon(self, points: list[tuple[int, int]], r: int, g: int, b: int) -> None: ...
    def draw_rect(self, x: int, y: int, w: int, h: int, r: int, g: int, b: int) -> None: ...
    def fill_circle(self, centerX: int, centerY: int, radius: int, r: int, g: int, b: int) -> None: ...
    def fill_rect(self, x: int, y: int, w: int, h: int, r: int, g: int, b: int) -> None: ...
    def get_height(self) -> int: ...
    def get_ticks(self) -> int: ...
    def get_width(self) -> int: ...
    def initialize(self) -> bool: ...
    def is_key_pressed(self, key: SDL_Scancode) -> bool: ...
    def poll_event(self, event: SDL_Event) -> bool: ...
    def update_screen(self) -> None: ...

class SDL_Event:
    key: SDL_KeyboardEvent
    type: int
    def __init__(self) -> None: ...

class SDL_EventType:
    __members__: ClassVar[dict] = ...  # read-only
    KEYDOWN: ClassVar[SDL_EventType] = ...
    QUIT: ClassVar[SDL_EventType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class SDL_KeyboardEvent:
    keysym: SDL_Keysym
    def __init__(self, *args, **kwargs) -> None: ...

class SDL_Keysym:
    scancode: SDL_Scancode
    def __init__(self, *args, **kwargs) -> None: ...

class SDL_Scancode:
    __members__: ClassVar[dict] = ...  # read-only
    A: ClassVar[SDL_Scancode] = ...
    Apostrophe: ClassVar[SDL_Scancode] = ...
    B: ClassVar[SDL_Scancode] = ...
    Backslash: ClassVar[SDL_Scancode] = ...
    Backspace: ClassVar[SDL_Scancode] = ...
    C: ClassVar[SDL_Scancode] = ...
    CapsLock: ClassVar[SDL_Scancode] = ...
    Comma: ClassVar[SDL_Scancode] = ...
    D: ClassVar[SDL_Scancode] = ...
    Down: ClassVar[SDL_Scancode] = ...
    E: ClassVar[SDL_Scancode] = ...
    Eight: ClassVar[SDL_Scancode] = ...
    Equals: ClassVar[SDL_Scancode] = ...
    Escape: ClassVar[SDL_Scancode] = ...
    F: ClassVar[SDL_Scancode] = ...
    F1: ClassVar[SDL_Scancode] = ...
    F10: ClassVar[SDL_Scancode] = ...
    F11: ClassVar[SDL_Scancode] = ...
    F12: ClassVar[SDL_Scancode] = ...
    F2: ClassVar[SDL_Scancode] = ...
    F3: ClassVar[SDL_Scancode] = ...
    F4: ClassVar[SDL_Scancode] = ...
    F5: ClassVar[SDL_Scancode] = ...
    F6: ClassVar[SDL_Scancode] = ...
    F7: ClassVar[SDL_Scancode] = ...
    F8: ClassVar[SDL_Scancode] = ...
    F9: ClassVar[SDL_Scancode] = ...
    Five: ClassVar[SDL_Scancode] = ...
    Four: ClassVar[SDL_Scancode] = ...
    G: ClassVar[SDL_Scancode] = ...
    Grave: ClassVar[SDL_Scancode] = ...
    H: ClassVar[SDL_Scancode] = ...
    I: ClassVar[SDL_Scancode] = ...
    J: ClassVar[SDL_Scancode] = ...
    K: ClassVar[SDL_Scancode] = ...
    L: ClassVar[SDL_Scancode] = ...
    Left: ClassVar[SDL_Scancode] = ...
    LeftBracket: ClassVar[SDL_Scancode] = ...
    M: ClassVar[SDL_Scancode] = ...
    Minus: ClassVar[SDL_Scancode] = ...
    N: ClassVar[SDL_Scancode] = ...
    Nine: ClassVar[SDL_Scancode] = ...
    O: ClassVar[SDL_Scancode] = ...
    One: ClassVar[SDL_Scancode] = ...
    P: ClassVar[SDL_Scancode] = ...
    Period: ClassVar[SDL_Scancode] = ...
    Q: ClassVar[SDL_Scancode] = ...
    R: ClassVar[SDL_Scancode] = ...
    Return: ClassVar[SDL_Scancode] = ...
    Right: ClassVar[SDL_Scancode] = ...
    RightBracket: ClassVar[SDL_Scancode] = ...
    S: ClassVar[SDL_Scancode] = ...
    Semicolon: ClassVar[SDL_Scancode] = ...
    Seven: ClassVar[SDL_Scancode] = ...
    Six: ClassVar[SDL_Scancode] = ...
    Slash: ClassVar[SDL_Scancode] = ...
    Space: ClassVar[SDL_Scancode] = ...
    T: ClassVar[SDL_Scancode] = ...
    Tab: ClassVar[SDL_Scancode] = ...
    Three: ClassVar[SDL_Scancode] = ...
    Two: ClassVar[SDL_Scancode] = ...
    U: ClassVar[SDL_Scancode] = ...
    Unknown: ClassVar[SDL_Scancode] = ...
    Up: ClassVar[SDL_Scancode] = ...
    V: ClassVar[SDL_Scancode] = ...
    W: ClassVar[SDL_Scancode] = ...
    X: ClassVar[SDL_Scancode] = ...
    Y: ClassVar[SDL_Scancode] = ...
    Z: ClassVar[SDL_Scancode] = ...
    Zero: ClassVar[SDL_Scancode] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
